// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen query without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type SelectionDef, type TypeBuilder, type Vars, type Selection, type ExtendSelected, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = __runtime.typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, []>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<User, R, V> {
    /**
     * User id
     * @type string
     */
    id: Omit<UserSelect<ExtendSelected<R, ["id"]>, V, P>, keyof R | "id">
    /**
     * @type string
     */
    name: Omit<UserSelect<ExtendSelected<R, ["name"]>, V, P>, keyof R | "name">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): UserSelect<[...R, ...SR], V & SV, P>
}
/**
 * Curent user
 */
export const queryCurrentUser = __runtime.queryBuilder("currentUser", User) as <SS extends SelectionDef, SV extends Vars, >(...args: [string, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>] | [(select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>])=> BuildReturn<User | null, SS, SV>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen query with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type SelectionDef, type TypeBuilder, type Vars, type Selection, type ExtendSelected, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
const __ArgumentInfo0 = {"id":"ID!"}
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = __runtime.typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, []>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<User, R, V> {
    /**
     * User id
     * @type string
     */
    id: Omit<UserSelect<ExtendSelected<R, ["id"]>, V, P>, keyof R | "id">
    /**
     * @type string
     */
    name: Omit<UserSelect<ExtendSelected<R, ["name"]>, V, P>, keyof R | "name">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): UserSelect<[...R, ...SR], V & SV, P>
}
export type QueryUserArgs = {
    id: string
}
export const queryUser = __runtime.queryBuilder("user", [__ArgumentInfo0, User]) as <SS extends SelectionDef, SV extends Vars, AA extends Arguments<QueryUserArgs>>(...args: [string, AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>] | [AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>]) => BuildReturn<User | null, SS, SV & ToVars<QueryUserArgs, [], AA>>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen mutation without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
export const mutateSomeMutaionThing = __runtime.mutationBuilder("someMutaionThing") as (name?: string) => BuildReturn<string, never, never>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen mutation with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type SelectionDef, type TypeBuilder, type Vars, type Selection, type ExtendSelected, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
const __ArgumentInfo0 = {"id":"ID!","name":"String!"}
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = __runtime.typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, []>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<User, R, V> {
    /**
     * User id
     * @type string
     */
    id: Omit<UserSelect<ExtendSelected<R, ["id"]>, V, P>, keyof R | "id">
    /**
     * @type string
     */
    name: Omit<UserSelect<ExtendSelected<R, ["name"]>, V, P>, keyof R | "name">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): UserSelect<[...R, ...SR], V & SV, P>
}
export type QueryUpdateUserArgs = {
    id: string
    name: string
}
export const queryUpdateUser = __runtime.queryBuilder("updateUser", [__ArgumentInfo0, User]) as <SS extends SelectionDef, SV extends Vars, AA extends Arguments<QueryUpdateUserArgs>>(...args: [string, AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>] | [AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>]) => BuildReturn<User | null, SS, SV & ToVars<QueryUpdateUserArgs, [], AA>>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen subscription without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
export const subscribeOnChangeSomething = __runtime.subscriptionBuilder("onChangeSomething") as (name?: string) => BuildReturn<string, never, never>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen subscription with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type SelectionDef, type TypeBuilder, type Vars, type Selection, type ExtendSelected, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
const __ArgumentInfo0 = {"type":"String!"}
export type SomeEvent = {
    __typename: "SomeEvent"
    id: string
}
export const SomeEvent = __runtime.typeBuilder("SomeEvent") as TypeBuilder<SomeEventSelect<["__typename"], {}, []>, "SomeEvent">
export interface SomeEventSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<SomeEvent, R, V> {
    /**
     * @type string
     */
    id: Omit<SomeEventSelect<ExtendSelected<R, ["id"]>, V, P>, keyof R | "id">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<SomeEvent, SR, SV>): SomeEventSelect<[...R, ...SR], V & SV, P>
}
export type SubscribeOnChangeSomethingArgs = {
    type: string
}
export const subscribeOnChangeSomething = __runtime.subscriptionBuilder("onChangeSomething", [__ArgumentInfo0, SomeEvent]) as <SS extends SelectionDef, SV extends Vars, AA extends Arguments<SubscribeOnChangeSomethingArgs>>(...args: [string, AA, (select: SomeEventSelect<["__typename"], {}, []>) => Selection<any, SS, SV>] | [AA, (select: SomeEventSelect<["__typename"], {}, []>) => Selection<any, SS, SV>]) => BuildReturn<SomeEvent, SS, SV & ToVars<SubscribeOnChangeSomethingArgs, [], AA>>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen Optional array 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { type BuildReturn, type TypeBuilder, type Vars, type Selection, type ExtendSelected, type SelectionDef, type TypeOf, type VarOf, type Selected } from "@gql-unicorn/runtime"
const __ArgumentInfo0 = {"filter":"UserFilter"}
export type UserFilter = {
    __typename: "UserFilter"
    ids?: Array<string> | null
}
export const UserFilter = __runtime.typeBuilder("UserFilter") as TypeBuilder<UserFilterSelect<["__typename"], {}, []>, "UserFilter">
export interface UserFilterSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<UserFilter, R, V> {
    /**
     * @type Array<string> | null
     */
    ids: Omit<UserFilterSelect<ExtendSelected<R, ["ids"]>, V, P>, keyof R | "ids">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<UserFilter, SR, SV>): UserFilterSelect<[...R, ...SR], V & SV, P>
}
export type User = {
    __typename: "User"
    id: string
}
export const User = __runtime.typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, []>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[]> extends Selection<User, R, V> {
    /**
     * @type string
     */
    id: Omit<UserSelect<ExtendSelected<R, ["id"]>, V, P>, keyof R | "id">
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): UserSelect<[...R, ...SR], V & SV, P>
}
export type QueryUsersArgs = {
    filter?: UserFilter
}
export const queryUsers = __runtime.queryBuilder("users", [__ArgumentInfo0, User]) as <SS extends SelectionDef, SV extends Vars, AA extends Arguments<QueryUsersArgs>>(...args: [string, AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>] | [AA, (select: UserSelect<["__typename"], {}, []>) => Selection<any, SS, SV>]) => BuildReturn<Array<User>, SS, SV & ToVars<QueryUsersArgs, [], AA>>
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;
