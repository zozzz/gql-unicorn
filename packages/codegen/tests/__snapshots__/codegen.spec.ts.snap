// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen query without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { queryBuilder, type BuildReturn, type SelectionDef, type TypeBuilder, type BuilderInfo, typeBuilder, type Vars, type Selection, type ExtendSelection, type SelectedFields, type MergeSelection, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, [], never, never>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<User, R, V> {
    /**
     * User id
     */
    id: Omit<UserSelect<ExtendSelection<R, "id">, V, P, B, E>, SelectedFields<R> | "id" | E>
    name: Omit<UserSelect<ExtendSelection<R, "name">, V, P, B, E>, SelectedFields<R> | "name" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): Omit<UserSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
type AsBuilder = { input: Input, output: any }
/**
 * Curent user
 */
export const queryCurrentUser = queryBuilder("currentUser", User) as (<SS extends SelectionDef, SV extends Vars, >(...args: [string, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [(select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>])=> BuildReturn<User | null, SS, SV>) & { builder: undefined }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen query with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { queryBuilder, type BuildReturn, type SelectionDef, type TypeBuilder, type BuilderInfo, typeBuilder, type Vars, type Selection, type ExtendSelection, type SelectedFields, type MergeSelection, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
export type Arguments0 = {
    id: string
}
const __ArgumentInfo1 = { tn: "ID!" }
const __ArgumentInfo0 = { id: __ArgumentInfo1, }
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, [], never, never>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<User, R, V> {
    /**
     * User id
     */
    id: Omit<UserSelect<ExtendSelection<R, "id">, V, P, B, E>, SelectedFields<R> | "id" | E>
    name: Omit<UserSelect<ExtendSelection<R, "name">, V, P, B, E>, SelectedFields<R> | "name" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): Omit<UserSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
type AsBuilder = { input: Input, output: any }
export const queryUser = queryBuilder("user", [__ArgumentInfo0, User]) as (<SS extends SelectionDef, SV extends Vars, AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>]) => BuildReturn<User | null, SS, SV & ToVars<Arguments0, [], AA>>) & { builder: <AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>] | [ArgsParam<Arguments0, AA>]) => UserSelect<["__typename"], AA, [], { input: Arguments0, output: User | null }, never> }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen mutation without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { mutationBuilder, type BuildReturn, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
type AsBuilder = { input: Input, output: any }
export const someMutaionThing = mutationBuilder("someMutaionThing") as ((name?: string) => BuildReturn<string, never, never>) & { builder: undefined }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen mutation with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { queryBuilder, type BuildReturn, type SelectionDef, type TypeBuilder, type BuilderInfo, typeBuilder, type Vars, type Selection, type ExtendSelection, type SelectedFields, type MergeSelection, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
export type Arguments0 = {
    id: string
    name: string
}
const __ArgumentInfo1 = { tn: "ID!" }
const __ArgumentInfo2 = { tn: "String!" }
const __ArgumentInfo0 = { id: __ArgumentInfo1,name: __ArgumentInfo2, }
export type User = {
    __typename: "User"
    /**
     * User id
     */
    id: string
    name: string
}
export const User = typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, [], never, never>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<User, R, V> {
    /**
     * User id
     */
    id: Omit<UserSelect<ExtendSelection<R, "id">, V, P, B, E>, SelectedFields<R> | "id" | E>
    name: Omit<UserSelect<ExtendSelection<R, "name">, V, P, B, E>, SelectedFields<R> | "name" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): Omit<UserSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
type AsBuilder = { input: Input, output: any }
export const queryUpdateUser = queryBuilder("updateUser", [__ArgumentInfo0, User]) as (<SS extends SelectionDef, SV extends Vars, AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>]) => BuildReturn<User | null, SS, SV & ToVars<Arguments0, [], AA>>) & { builder: <AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>] | [ArgsParam<Arguments0, AA>]) => UserSelect<["__typename"], AA, [], { input: Arguments0, output: User | null }, never> }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen subscription without parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { subscriptionBuilder, type BuildReturn, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
type AsBuilder = { input: Input, output: any }
export const subscribeOnChangeSomething = subscriptionBuilder("onChangeSomething") as ((name?: string) => BuildReturn<string, never, never>) & { builder: undefined }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen subscription with parameters 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { subscriptionBuilder, type BuildReturn, type SelectionDef, type TypeBuilder, type BuilderInfo, typeBuilder, type Vars, type Selection, type ExtendSelection, type SelectedFields, type MergeSelection, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
export type Arguments0 = {
    type: string
}
const __ArgumentInfo1 = { tn: "String!" }
const __ArgumentInfo0 = { type: __ArgumentInfo1, }
export type SomeEvent = {
    __typename: "SomeEvent"
    id: string
}
export const SomeEvent = typeBuilder("SomeEvent") as TypeBuilder<SomeEventSelect<["__typename"], {}, [], never, never>, "SomeEvent">
export interface SomeEventSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<SomeEvent, R, V> {
    id: Omit<SomeEventSelect<ExtendSelection<R, "id">, V, P, B, E>, SelectedFields<R> | "id" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<SomeEvent, SR, SV>): Omit<SomeEventSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
type AsBuilder = { input: Input, output: any }
export const subscribeOnChangeSomething = subscriptionBuilder("onChangeSomething", [__ArgumentInfo0, SomeEvent]) as (<SS extends SelectionDef, SV extends Vars, AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>, (select: SomeEventSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [ArgsParam<Arguments0, AA>, (select: SomeEventSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>]) => BuildReturn<SomeEvent, SS, SV & ToVars<Arguments0, [], AA>>) & { builder: <AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>] | [ArgsParam<Arguments0, AA>]) => SomeEventSelect<["__typename"], AA, [], { input: Arguments0, output: SomeEvent }, never> }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;

exports[`codegen Optional array 1`] = `
"/* eslint-disable */
/* prettier-ignore */
/* !!! GENERATED FILE DO NOT EDIT !!! */
import * as __runtime from "@gql-unicorn/runtime"
import { queryBuilder, type BuildReturn, type TypeBuilder, type BuilderInfo, typeBuilder, type Vars, type Selection, type ExtendSelection, type SelectedFields, type MergeSelection, type SelectionDef, type TypeOf, type VarOf, type Selected, type Input } from "@gql-unicorn/runtime"
export type Arguments0 = {
    filter?: UserFilter
}
const __ArgumentInfo1 = { tn: "UserFilter" }
const __ArgumentInfo0 = { filter: __ArgumentInfo1, }
export type UserFilter = {
    __typename: "UserFilter"
    ids?: Array<string> | null
}
export const UserFilter = typeBuilder("UserFilter") as TypeBuilder<UserFilterSelect<["__typename"], {}, [], never, never>, "UserFilter">
export interface UserFilterSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<UserFilter, R, V> {
    ids: Omit<UserFilterSelect<ExtendSelection<R, "ids">, V, P, B, E>, SelectedFields<R> | "ids" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<UserFilter, SR, SV>): Omit<UserFilterSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
export type User = {
    __typename: "User"
    id: string
}
export const User = typeBuilder("User") as TypeBuilder<UserSelect<["__typename"], {}, [], never, never>, "User">
export interface UserSelect<R extends SelectionDef, V extends Vars, P extends string[], B extends AsBuilder = never, E extends string = never> extends Selection<User, R, V> {
    id: Omit<UserSelect<ExtendSelection<R, "id">, V, P, B, E>, SelectedFields<R> | "id" | E>
    /**
     * Constraint type selection
     */
    $on<SR extends SelectionDef, SV extends Vars>(fragment: Selection<User, SR, SV>): Omit<UserSelect<MergeSelection<R, ExtendSelection<SR, "__typename">>, V & SV, P, B, E>, SelectedFields<R> | E>
    /**
     * Build the typed document node
     */
    $build: B extends { input: infer BI, output: infer BO } ? () => BuildReturn<BO, R, ToVars<BI, P, V>> : never
}
type AsBuilder = { input: Input, output: any }
export const queryUsers = queryBuilder("users", [__ArgumentInfo0, User]) as (<SS extends SelectionDef, SV extends Vars, AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [ArgsParam<Arguments0, AA>, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [string, (select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>] | [(select: UserSelect<["__typename"], {}, [], never, "$build">) => Selection<any, SS, SV>]) => BuildReturn<Array<User>, SS, SV & ToVars<Arguments0, [], AA>>) & { builder: <AA extends Arguments<Arguments0>>(...args: [string, ArgsParam<Arguments0, AA>] | [ArgsParam<Arguments0, AA>] | [string] | []) => UserSelect<["__typename"], AA, [], { input: Arguments0, output: Array<User> }, never> }
export const $ = __runtime.$
export const $$ = __runtime.$$
export type { TypeOf, VarOf, Selected }"
`;
