type Query {
    nodes: Node
    node(id: ID!): Node
    user(id: ID!): User
    articles(filter: ArticleFilter): [Article!]!
    location(id: ID!): Location
    currentUserId: ID
    selfRecursive(id: ID!): SelfRecursive
    afc: AFC!
    atomicScalar: String!
    atomicArgsScalar(id: ID): String

}

type Mutation {
    updateArticle(id: ID!, params: ArticleUpdate!): Article!
    doSomething(something: String): Int
}

type Subscription {
    watch(event: String!): Event!
}

# TODO:
# scalar DateTime

interface Node {
    id: ID!
}

type User implements Node {
    id: ID!
    name: String!
    articles(count: Int!): [Article!]!
}

type Article implements Node {
    id: ID!
    title: String!
    tags: [Tag!]
}

input ArticleFilter {
    title: String!
}

input ArticleUpdate {
    title: String!
}

type Tag implements Node {
    id: ID!
    tag: String!
}


interface Event {
    source: String!
}

type UserChangeEvent implements Event {
    prev: User!
    curr: User!
}

type ArticleChangeEvent implements Event {
    prev: Article!
    curr: Article!
}

enum DistanceUnit {
    METRIC
    IMPERIAL
}

type Location {
    id: ID!
    name: String!
    distance(lat: Float!, lng: Float!, unit: DistanceUnit!): Float!
}


type SelfRecursive {
    id: ID!
    parent: SelfRecursive!
}


type AFC {
    "ID of AFC"
    id: ID!
    parent: AFC
    optional: String
    distance(lat: Float!, lng: Float!, unit: DistanceUnit!): Float!
    nearest(lat: Float!, lng: Float!): Location
    hq: Location!
    hqName: String!
}
