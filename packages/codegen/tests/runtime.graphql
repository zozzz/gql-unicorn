type Query {
    "Get all nodes"
    nodes: [Node!]!
    node(id: ID!): Node
    user(id: ID!): User
    users(filter: UserFilter!): [User!]!
    usersOptionalFilter(filter: UserFilter): [User!]!
    articles(filter: ArticleFilter): [Article!]!
    location(id: ID!): Location
    currentUserId: ID
    selfRecursive(id: ID!): SelfRecursive
    afc: AFC!
    filterAfc(filter: AFCFilter, order: AFCOrder, offset: Int, limit: Int): [AFC!]!
    atomicScalar: String!
    atomicArgsScalar(id: ID): String
    search(text: String!): [SearchResult!]!
    search2(text: String!): [SearchResult!]
    search3(text: String!): [SearchResult]
}

type Mutation {
    updateArticle(
        "Article id"
        id: ID!,
        "Fields to update"
        params: ArticleUpdate!): Article!
    doSomething(something: String): Int
}

type Subscription {
    watch(event: String!): Event!
}

# TODO:
# scalar DateTime

interface Node {
    id: ID!
}

type User implements Node {
    "ID of USer"
    id: ID!
    "Name of user"
    name: String!
    "Articles created by user"
    articles(count: Int!): [Article!]!
}

input UserFilter {
    and: [UserFilter!]
    or: [UserFilter!]
    not: [UserFilter!]
    id: ID
    name: String
}

type Article implements Node {
    " Id of Article "
    id: ID!
    "Title of Article"
    title: String!
    "Tags of Article"
    tags: [Tag!]
}

input ArticleFilter {
    title: String!
}

input ArticleUpdate {
    title: String!
}

type Tag implements Node {
    id: ID!
    tag: String!
}


interface Event {
    source: String!
}

type UserChangeEvent implements Event {
    prev: User!
    curr: User!
}

type ArticleChangeEvent implements Event {
    "Previous values of Article"
    prev: Article!
    "Current values of Article"
    curr: Article!
}

enum DistanceUnit {
    METRIC
    IMPERIAL
}

type Location {
    id: ID!
    name: String!
    distance(lat: Float!, lng: Float!, unit: DistanceUnit!): Float!
}


type SelfRecursive {
    id: ID!
    parent: SelfRecursive!
}


enum AFCKind {
    SIMPLE,
    EXTENDED
}

type AFC {
    "ID of AFC"
    id: ID!
    parent: AFC
    kind: AFCKind!
    optional: String
    distance(lat: Float!, lng: Float!, unit: DistanceUnit!): Float!
    nearest(lat: Float!, lng: Float!): Location
    hq: Location!
    hqName: String!
    allOptional(arg1: String, arg2: String): String
}

union SearchResult = AFC | SelfRecursive

enum OrderDirection {
    ASC,
    DESC
}

input AFCFilter {
    and: [AFCFilter!]
    or: [AFCFilter!]
    not: [AFCFilter!]
    id: ID
    kind: AFCKind
}

input AFCOrder {
    id: OrderDirection
    kind: OrderDirection
}
